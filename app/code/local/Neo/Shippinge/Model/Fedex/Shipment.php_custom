<?php

class Neo_Shippinge_Model_Fedex_Shipment extends Neo_Shippinge_Model_Fedex
{
	public function fadex($post) 
	{
		$log_file_name  = "shipment".Mage::getModel('core/date')->date('Y-m-d').".log";
        $incrementId    = $post["incrementid"];
        $no_of_awbs     = $post["no_of_awbs"];
        $weight         = $post["weight"];
        $invoice_id     = $post["invoice_id"];
        $service_type     = $post["service_type"];
        
        $data = array();
		if($incrementId)
		{
			$order = Mage::getModel("sales/order")->loadByIncrementId($incrementId);
			$invoice = Mage::getModel('sales/order_invoice')->load($invoice_id);
			$base_grand_total = $invoice->getBaseGrandTotal();
			$shipping_address = $order->getShippingAddress();
            $customer = $order->getCustomer();
			$recipient = array(
				'Contact' => array(
					'PersonName' => $shipping_address->getPrefix()." ".$shipping_address->getFirstname()." ".$shipping_address->getLastname(),
					'CompanyName' => $shipping_address->getCompany(),
					'PhoneNumber' => $shipping_address->getTelephone()
				),
				'Address' => array(
					'StreetLines' => $shipping_address->getStreet(),
					'City' => $shipping_address->getCity(),
					'StateOrProvinceCode' => $shipping_address->getRegion(),
					'PostalCode' => $shipping_address->getPostcode(),
					'CountryCode' => $shipping_address->getCountryId(),
					'Residential' => true
				)
			);
			
			$shipper = array(
					'Contact' => array(
						'PersonName' => 'Electronics Bazaar',
						'CompanyName' => 'Electronics Bazaar',
						'PhoneNumber' => '18002660786'
					),
					'Address' => array(
						'StreetLines' => array('Building No.D, Gala NO.4/15, Harihar Corporation, Dapode'),
						'City' => 'Bhiwandi',
						'StateOrProvinceCode' => 'Maharashtra',
						'PostalCode' => '421302',
						'CountryCode' => 'IN'
					)
			);
			$specialServices = array(
				'SpecialServiceTypes' => array('COD'),
				'CodDetail' => array(
					'CodCollectionAmount' => array(
						'Currency' => 'INR',
						'Amount' => 150
					),
					'CollectionType' => 'GUARANTEED_FUNDS' // ANY, GUARANTEED_FUNDS
				)
			);
			$data['Recipient'] = $recipient;
			$data['Shipper'] = $shipper;
			$data['ServiceType'] = $service_type;
			$data['TotalWeight'] = array('Value' => $weight,'Units' => 'KG');
			$data['image_name'] = 'order_'.$incrementId.'_shipment'.time().'.png';
			$data['SpecialServicesRequested'] = $specialServices;
			
			return $this->CreateShipment($request);
		}
		return 'order increment id not found';
	}
	
    public function CreateShipment($data)
    {
        //The WSDL is not included with the sample code.
//Please include and reference in $path_to_wsdl variable.
        //$path_to_wsdl = "../../../wsdl/ShipService_v15.wsdl";
        $path_to_wsdl = Mage::getModuleDir("", "Neo_Shippinge").DS."wsdl".DS."ShipService_v15.wsdl";

        //define('SHIP_LABEL', 'shipexpresslabel.pdf');  // PNG label file. Change to file-extension .pdf for creating a PDF label (e.g. shiplabel.pdf)
        define('SHIP_LABEL', $data['image_name']);  // PNG label file. Change to file-extension .pdf for creating a PDF label (e.g. shiplabel.pdf)
        define('SHIP_CODLABEL', 'CODexpressreturnlabel.pdf');  // PNG label file. Change to file-extension .pdf for creating a PDF label (e.g. CODexpressreturnlabel.pdf)

        ini_set("soap.wsdl_cache_enabled", "0");

        $client = new SoapClient($path_to_wsdl, array('trace' => 1)); // Refer to http://us3.php.net/manual/en/ref.soap.php for more information


        $request['WebAuthenticationDetail'] = array(
            'UserCredential' => array(
                'Key' => $this->getProperty('key'),
                'Password' => $this->getProperty('password')
            )
        );
        $request['ClientDetail'] = array(
            'AccountNumber' => $this->getProperty('shipaccount'),
            'MeterNumber' => $this->getProperty('meter')
        );
        $request['TransactionDetail'] = array('CustomerTransactionId' => '*** Express Domestic Shipping Request using PHP ***');
        $request['Version'] = array(
            'ServiceId' => 'ship',
            'Major' => '15',
            'Intermediate' => '0',
            'Minor' => '0'
        );
        $request['RequestedShipment'] = array(
            'ShipTimestamp' => date('c'),
            'DropoffType' => 'REGULAR_PICKUP', // valid values REGULAR_PICKUP, REQUEST_COURIER, DROP_BOX, BUSINESS_SERVICE_CENTER and STATION
            'ServiceType' => $data['ServiceType'], // valid values STANDARD_OVERNIGHT, PRIORITY_OVERNIGHT, FEDEX_GROUND, ...
            'PackagingType' => 'YOUR_PACKAGING', // valid values FEDEX_BOX, FEDEX_PAK, FEDEX_TUBE, YOUR_PACKAGING, ...
            'TotalWeight' => $data['TotalWeight'],
            'Shipper' => $data['Shipper'],
            'Recipient' => $data['Recipient'],
            'ShippingChargesPayment' => $this->addShippingChargesPayment(),
            //'SpecialServicesRequested' => $data['SpecialServicesRequested'],
            'LabelSpecification' => $this->addLabelSpecification(),
            'PackageCount' => 1,
            'RequestedPackageLineItems' => array(
                '0' => $this->addPackageLineItem1()
            )
        );

        try {
            if($this->setEndpoint('changeEndpoint')){
                $newLocation = $client->__setLocation($this->setEndpoint('endpoint'));
            }
            $response = $client->processShipment($request);  // FedEx web service invocation
Mage::log($response,null,'bhargav.log',true);
            if ($response->HighestSeverity != 'FAILURE' && $response->HighestSeverity != 'ERROR'){
				Mage::log($response,null,'bhargav.log',true);
                //$this->printSuccess($client, $response);
/*
                $fp = fopen(SHIP_CODLABEL, 'wb');
                fwrite($fp, $response->CompletedShipmentDetail->AssociatedShipments->Label->Parts->Image); //Create COD Return PNG or PDF file
                fclose($fp);
                echo '<a href="./'.SHIP_CODLABEL.'">'.SHIP_CODLABEL.'</a> was generated.'.Newline;
*/
                // Create PNG or PDF label
                // Set LabelSpecification.ImageType to 'PDF' or 'PNG for generating a PDF or a PNG label
                
                $fp = fopen(Mage::getBaseDir('var').'/fadex_shipment/'.SHIP_LABEL, 'wb');
                fwrite($fp, $response->CompletedShipmentDetail->CompletedPackageDetails->Label->Parts->Image); //Create PNG or PDF file
                fclose($fp);
                return $response;
                //echo '<a href="./'.SHIP_LABEL.'">'.SHIP_LABEL.'</a> was generated.';
            }else{
                //$this->printError($client, $response);
            }

            //$this->writeToLog($client);    // Write to log file
        } catch (SoapFault $exception) {
            //$this->printFault($exception, $client);
        }
    }

    protected function getProperty($var){
        if($var == 'key') Return 'e641XGlcpE11yxZ7';
        if($var == 'password') Return '5d1eEdwlRxPSakU2IvEDX9RVH';
        if($var == 'shipaccount') Return '510087720';
        if($var == 'billaccount') Return '510087720';
        if($var == 'dutyaccount') Return '510087720';
        if($var == 'freightaccount') Return '510087720';
        if($var == 'trackaccount') Return '510087720';
        if($var == 'dutiesaccount') Return '510087720';
        if($var == 'importeraccount') Return '510087720';
        if($var == 'brokeraccount') Return '510087720';
        if($var == 'distributionaccount') Return '510087720';
        if($var == 'locationid') Return 'PLBA';
        if($var == 'printlabels') Return false;
        if($var == 'printdocuments') Return true;
        if($var == 'packagecount') Return '4';

        if($var == 'meter') Return '118650290';

        if($var == 'shiptimestamp') Return mktime(10, 0, 0, date("m"), date("d")+1, date("Y"));

        if($var == 'spodshipdate') Return '2014-07-21';
        if($var == 'serviceshipdate') Return '2017-07-26';

        if($var == 'readydate') Return '2014-07-09T08:44:07';
        //if($var == 'closedate') Return date("Y-m-d");
        if($var == 'closedate') Return '2014-07-17';
        if($var == 'pickupdate') Return date("Y-m-d", mktime(8, 0, 0, date("m")  , date("d")+1, date("Y")));
        if($var == 'pickuptimestamp') Return mktime(8, 0, 0, date("m")  , date("d")+1, date("Y"));
        if($var == 'pickuplocationid') Return 'XXX';
        if($var == 'pickupconfirmationnumber') Return '1';

        if($var == 'dispatchdate') Return date("Y-m-d", mktime(8, 0, 0, date("m")  , date("d")+1, date("Y")));
        if($var == 'dispatchlocationid') Return 'XXX';
        if($var == 'dispatchconfirmationnumber') Return '1';

        if($var == 'tag_readytimestamp') Return mktime(10, 0, 0, date("m"), date("d")+1, date("Y"));
        if($var == 'tag_latesttimestamp') Return mktime(20, 0, 0, date("m"), date("d")+1, date("Y"));

        if($var == 'expirationdate') Return date("Y-m-d", mktime(8, 0, 0, date("m"), date("d")+15, date("Y")));
        if($var == 'begindate') Return '2014-07-22';
        if($var == 'enddate') Return '2014-07-25';

        if($var == 'trackingnumber') Return 'XXX';

        if($var == 'hubid') Return '5531';

        if($var == 'jobid') Return 'XXX';

        if($var == 'searchlocationphonenumber') Return '5555555555';
        if($var == 'customerreference') Return 'Cust_Reference';

        if($var == 'shipper') Return array(
            'Contact' => array(
                'PersonName' => 'Sender Name',
                'CompanyName' => 'Sender Company Name',
                'PhoneNumber' => '1234567890'
            ),
            'Address' => array(
                'StreetLines' => array('Address Line 1'),
                'City' => 'Collierville',
                'StateOrProvinceCode' => 'TN',
                'PostalCode' => '38017',
                'CountryCode' => 'US',
                'Residential' => 1
            )
        );
        if($var == 'recipient') Return array(
            'Contact' => array(
                'PersonName' => 'Recipient Name',
                'CompanyName' => 'Recipient Company Name',
                'PhoneNumber' => '1234567890'
            ),
            'Address' => array(
                'StreetLines' => array('Address Line 1'),
                'City' => 'Herndon',
                'StateOrProvinceCode' => 'VA',
                'PostalCode' => '20171',
                'CountryCode' => 'US',
                'Residential' => 1
            )
        );

        if($var == 'address1') Return array(
            'StreetLines' => array('10 Fed Ex Pkwy'),
            'City' => 'Memphis',
            'StateOrProvinceCode' => 'TN',
            'PostalCode' => '38115',
            'CountryCode' => 'US'
        );
        if($var == 'address2') Return array(
            'StreetLines' => array('13450 Farmcrest Ct'),
            'City' => 'Herndon',
            'StateOrProvinceCode' => 'VA',
            'PostalCode' => '20171',
            'CountryCode' => 'US'
        );
        if($var == 'searchlocationsaddress') Return array(
            'StreetLines'=> array('240 Central Park S'),
            'City'=>'Austin',
            'StateOrProvinceCode'=>'TX',
            'PostalCode'=>'78701',
            'CountryCode'=>'US'
        );

        if($var == 'shippingchargespayment') Return array(
            'PaymentType' => 'SENDER',
            'Payor' => array(
                'ResponsibleParty' => array(
                    'AccountNumber' => getProperty('billaccount'),
                    'Contact' => null,
                    'Address' => array('CountryCode' => 'US')
                )
            )
        );
        if($var == 'freightbilling') Return array(
            'Contact'=>array(
                'ContactId' => 'freight1',
                'PersonName' => 'Big Shipper',
                'Title' => 'Manager',
                'CompanyName' => 'Freight Shipper Co',
                'PhoneNumber' => '1234567890'
            ),
            'Address'=>array(
                'StreetLines'=>array(
                    '1202 Chalet Ln',
                    'Do Not Delete - Test Account'
                ),
                'City' =>'Harrison',
                'StateOrProvinceCode' => 'AR',
                'PostalCode' => '72601-6353',
                'CountryCode' => 'US'
            )
        );
    }

    protected function addShipper(){
        $shipper = array(
            'Contact' => array(
                'PersonName' => 'Sender Name',
                'CompanyName' => 'Sender Company Name',
                'PhoneNumber' => '1234567890'
            ),
            'Address' => array(
                'StreetLines' => array('Address Line 1'),
                'City' => 'Austin',
                'StateOrProvinceCode' => 'TX',
                'PostalCode' => '73301',
                'CountryCode' => 'US'
            )
        );
        return $shipper;
    }
    protected function addRecipient(){
        $recipient = array(
            'Contact' => array(
                'PersonName' => 'Recipient Name',
                'CompanyName' => 'Recipient Company Name',
                'PhoneNumber' => '1234567890'
            ),
            'Address' => array(
                'StreetLines' => array('Address Line 1'),
                'City' => 'Herndon',
                'StateOrProvinceCode' => 'VA',
                'PostalCode' => '20171',
                'CountryCode' => 'US',
                'Residential' => true
            )
        );
        return $recipient;
    }
    protected function addShippingChargesPayment(){
        $shippingChargesPayment = array('PaymentType' => 'SENDER',
            'Payor' => array(
                'ResponsibleParty' => array(
                    'AccountNumber' => $this->getProperty('billaccount'),
                    'Contact' => null,
                    'Address' => array(
                        'CountryCode' => 'IN')
                )
            )
        );
        return $shippingChargesPayment;
    }
    protected function addLabelSpecification(){
        $labelSpecification = array(
            'LabelFormatType' => 'COMMON2D', // valid values COMMON2D, LABEL_DATA_ONLY
            'ImageType' => 'PNG',  // valid values DPL, EPL2, PDF, ZPLII and PNG
            //'ImageType' => 'PDF',  // valid values DPL, EPL2, PDF, ZPLII and PNG
            'LabelStockType' => 'PAPER_7X4.75'
        );
        return $labelSpecification;
    }
    protected function addSpecialServices(){
        $specialServices = array(
            'SpecialServiceTypes' => array('COD'),
            'CodDetail' => array(
                'CodCollectionAmount' => array(
                    'Currency' => 'INR',
                    'Amount' => 150
                ),
                'CollectionType' => 'ANY' // ANY, GUARANTEED_FUNDS
            )
        );
        return $specialServices;
    }
    protected function addPackageLineItem1(){
        $packageLineItem = array(
            'SequenceNumber'=>1,
            'GroupPackageCount'=>1,
            'Weight' => array(
                'Value' => 5.0,
                'Units' => 'LB'
            ),
            'Dimensions' => array(
                'Length' => 20,
                'Width' => 20,
                'Height' => 10,
                'Units' => 'IN'
            )
        );
        return $packageLineItem;
    }

    protected function printSuccess($client, $response) {
        $this->printReply($client, $response);
    }

    protected function printReply($client, $response){
        $highestSeverity=$response->HighestSeverity;
        if($highestSeverity=="SUCCESS"){echo '<h2>The transaction was successful.</h2>';}
        if($highestSeverity=="WARNING"){echo '<h2>The transaction returned a warning.</h2>';}
        if($highestSeverity=="ERROR"){echo '<h2>The transaction returned an Error.</h2>';}
        if($highestSeverity=="FAILURE"){echo '<h2>The transaction returned a Failure.</h2>';}
        echo "\n";
        $this->printNotifications($response -> Notifications);
        $this->printRequestResponse($client, $response);
    }

    protected function printRequestResponse($client){
        echo '<h2>Request</h2>' . "\n";
        echo '<pre>' . htmlspecialchars($client->__getLastRequest()). '</pre>';
        echo "\n";

        echo '<h2>Response</h2>'. "\n";
        echo '<pre>' . htmlspecialchars($client->__getLastResponse()). '</pre>';
        echo "\n";
    }
}
